name: fact-check-pipeline

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: "YYYY-MM-DD"
        required: false
      end_date:
        description: "YYYY-MM-DD"
        required: false
  schedule:
    - cron: "30 17 * * *"

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Generate results (mock, always succeeds)
        run: |
          python -m pip install -U pip
          pip install pandas numpy matplotlib lifelines python-pptx python-docx
          mkdir -p analysis outputs data/clean
          python - <<'PY'
          import pandas as pd, numpy as np, matplotlib.pyplot as plt
          from lifelines import KaplanMeierFitter
          from pptx import Presentation
          from pptx.util import Inches
          from docx import Document
          import pathlib, random
          rng = random.Random(42)
          domains=["fullfact.org","factcheck.org","politifact.com","snopes.com","reuters.com","apnews.com","fact.qq.com","piyao.org.cn"]
          rows=[]
          for d in domains:
              for i in range(120):
                  rows.append({"platform":"X","domain":d,"url":f"https://{d}/a/{i}",
                               "halflife_hours":float(np.random.weibull(2)*8+0.5),"event_observed":1})
          df=pd.DataFrame(rows); pathlib.Path("data/clean").mkdir(parents=True,exist_ok=True)
          df.to_csv("data/clean/half_life_by_url.csv", index=False)

          plt.figure()
          for d, g in df.groupby("domain"):
              km=KaplanMeierFitter(label=d); km.fit(g["halflife_hours"], event_observed=g["event_observed"]); km.plot()
          plt.title("KM by Domain"); plt.tight_layout(); plt.savefig("analysis/km_by_domain.png", dpi=180); plt.close()

          med=(df.groupby("domain")["halflife_hours"].median().sort_values(ascending=False))
          med.plot(kind="bar"); plt.ylabel("Median Half-life (h)"); plt.tight_layout()
          plt.savefig("analysis/median_half_life_bar.png", dpi=180); plt.close()

          prs=Presentation(); s=prs.slides.add_slide(prs.slide_layouts[5]); s.shapes.title.text="KM by Domain"
          s.shapes.add_picture("analysis/km_by_domain.png", Inches(1), Inches(1.5), width=Inches(8))
          s=prs.slides.add_slide(prs.slide_layouts[5]); s.shapes.title.text="Median Half-life"
          s.shapes.add_picture("analysis/median_half_life_bar.png", Inches(1), Inches(1.5), width=Inches(8))
          pathlib.Path("outputs").mkdir(exist_ok=True, parents=True); prs.save("outputs/slides_auto.pptx")

          doc=Document(); doc.add_heading("自动化生存分析（演示数据）", 0)
          doc.add_picture("analysis/median_half_life_bar.png", width=Inches(6.5))
          doc.add_picture("analysis/km_by_domain.png", width=Inches(6.5))
          doc.save("outputs/report_auto.docx")
          print("OK")
          PY

      - uses: actions/upload-artifact@v4
        with:
          name: results-${{ github.run_id }}
          path: |
            analysis/**
            outputs/**
            data/clean/**
          if-no-files-found: error

      - name: Commit results branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -B results
          git add -A
          git commit -m "auto: results $(date -u +%F)" || true
          git push -f origin results
